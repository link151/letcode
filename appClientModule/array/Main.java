package array;

import java.util.ArrayList;
import java.util.List;

import letcode.ListNode;
import letcode.NumMatrix;

public class Main {

	public static void main(String[] args) {

		Sol sol=new Sol();
		int[] nums1={1,1,1,1,1};
		System.out.println("findPairs:"+sol.findPairs(nums1, 0));
		ListNode head=new ListNode(1);
		ListNode node1=new ListNode(2);
		ListNode node2=new ListNode(3);
		ListNode node3=new ListNode(4);
		head.next=node1;
		node1.next=node2;
		node2.next=node3;
		ListNode head2=new ListNode(1);
		ListNode node21=new ListNode(2);
		ListNode node22=new ListNode(3);
		ListNode node23=new ListNode(4);
		head2.next=node21;
		node21.next=node22;
		node22.next=node23;
//		System.out.println("reverseList:");
//		sol.reverseList(head);
//		sol.addTwoNumbers(head, head2);
//		sol.addTwoNumbers2(head, head2);
//		System.out.println("isPalindrome:"+sol.isPalindrome(head));
//		System.out.println("oddEvenList:"+sol.oddEvenList(head));
		System.out.println("removeElements:");
		sol.removeElements(head,4);
		System.out.println("countBits:");
		sol.countBits(5);
		int[] A={1,2,3,4};
		System.out.println("numberOfArithmeticSlices:"+sol.numberOfArithmeticSlices(A));
		System.out.println("countNumbersWithUniqueDigits:"+sol.countNumbersWithUniqueDigits(3));
		System.out.println("integerBreak:"+sol.integerBreak(10));
		System.out.println("integerBreak2:"+sol.integerBreak2(10));
		String s="abc",t="ahbgdc";
		System.out.println("isSubsequence:"+sol.isSubsequence(s,t));
		List<Integer> list=new ArrayList<Integer>();
		list.add(1);
		list.add(3);
		list.add(5);
		list.add(7);
		System.out.println("testBinarySearch:");
		sol.testBinarySearch(list,4);
		int[] nums={1,1,1,1};
		System.out.println("PredictTheWinner:"+sol.PredictTheWinner(nums));
		int[] nums2={1,5,11,5};
		System.out.println("canPartition:"+sol.canPartition(nums2));
		
		int[] nums3={1,1,1,1,1};
		int S=3;
		System.out.println("findTargetSumWays:"+sol.findTargetSumWays(nums3,S));
		System.out.println("longestPalindromeSubseq:"+sol.longestPalindromeSubseq("a"));
		int[] nums4={1,2,4};
		System.out.println("maxProfit:"+sol.maxProfit(nums4));
		System.out.println("maxProfit_2:"+sol.maxProfit_2(nums4));
		int[] nums5={3,1,5,8};
		System.out.println("maxCoins:"+sol.maxCoins(nums5));
		System.out.println("uniquePaths:"+sol.uniquePaths(3,7));
//		int[][] grid={{1,2,3,4},{2,3,4,1},{3,4,1,2},{4,1,2,3}};
		int[][] grid={{1,2},{1,1}};
		System.out.println("minPathSum:"+sol.minPathSum(grid));
		int[] nums6={4,10,4,3,8,9};
		System.out.println("lengthOfLIS:"+sol.lengthOfLIS(nums6));
		String[] strs={"10", "0", "1"};
		System.out.println("findMaxForm:"+sol.findMaxForm(strs,1,1));
		System.out.println("getMoneyAmount:"+sol.getMoneyAmount(100));
		int[] nums7={4,0,0,4};
//		System.out.println("findMinMoves:"+sol.findMinMoves(nums7));
		int[] nums8={1,1};
		System.out.println("wiggleMaxLength:"+sol.wiggleMaxLength(nums8));
		int[] nums9={1,3,1};
		System.out.println("rob:"+sol.rob2(nums9));
		int[] nums10={1,2,3,4,5,6,7,8,9};
		System.out.println("largestDivisibleSubset:"+sol.largestDivisibleSubset(nums10));
		System.out.println("findRotateSteps:"+sol.findRotateSteps("iotfo","fioot"));
		List<List<Integer>> listA=new ArrayList<List<Integer>>();
		List<Integer> list0=new ArrayList<Integer>();
		list0.add(2);
		List<Integer> list1=new ArrayList<Integer>();
		list1.add(3);
		list1.add(4);
		List<Integer> list2=new ArrayList<Integer>();
		list2.add(6);
		list2.add(5);
		list2.add(7);
		List<Integer> list3=new ArrayList<Integer>();
		list3.add(4);
		list3.add(1);
		list3.add(8);
		list3.add(3);
		listA.add(list0);
		listA.add(list1);
		listA.add(list2);
		listA.add(list3);
		System.out.println("minimumTotal:"+sol.minimumTotal(listA));
		System.out.println("nthUglyNumber:"+sol.nthUglyNumber(1690));
		System.out.println("numTrees:"+sol.numTrees(1));
		int[][] obstacleGrid={{0,0,0},{0,1,0},{0,0,0}};
		System.out.println("uniquePathsWithObstaclesII:"+sol.uniquePathsWithObstaclesII(obstacleGrid));
		System.out.println("generateTrees:"+sol.generateTrees(2));
		System.out.println("findSubstringInWraproundString:"+sol.findSubstringInWraproundString("cac"));
		System.out.println("findSubstringInWraproundString_2:"+sol.findSubstringInWraproundString_2("a"));
		String str="leettcode";
		List<String> wordDict=new ArrayList<String>();
		wordDict.add("leet");
		wordDict.add("code");
		wordDict.add("t");
		wordDict.add("leett");		System.out.println("wordBreak:"+sol.wordBreak(str,wordDict));
		System.out.println("wordBreak_2:"+sol.wordBreak_2(str,wordDict));
		char[][] matrix={{'1','0','1','0','0'},{'1','0','1','1','1'},{'1','1','1','1','1'},{'1','0','0','1','0'}};
		System.out.println("maximalSquare:"+sol.maximalSquare(matrix));
		int[] nums11={0,2};
		System.out.println("maxProduct:"+sol.maxProduct(nums11));
		int[] coins={2,5,10,1};
		System.out.println("coinChange:"+sol.coinChange(coins,27));
		int[][] matrix1={{3,0,1,4,2},{5,6,3,2,1},{1,2,0,1,5},{4,1,0,1,7},{1,0,3,0,5}};
		NumMatrix obj=new NumMatrix(matrix1);
		System.out.println("NumMatrix:"+obj.sumRegion(2, 1, 4, 3));
		System.out.println("numDecodings:"+sol.numDecodings("27"));
		System.out.println("canIWin:"+sol.canIWin(10,12));
	}

}
